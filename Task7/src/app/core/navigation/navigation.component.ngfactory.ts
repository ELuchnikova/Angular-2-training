/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from './navigation.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from './navigation.css.shim.ngstyle';
import * as import9 from '@angular/material/toolbar/toolbar';
import * as import10 from '../../../../node_modules/@angular/material/toolbar/toolbar.ngfactory';
import * as import11 from '@angular/core/src/linker/element_ref';
export class Wrapper_NavigationComponent {
  /*private*/ _eventHandler:Function;
  context:import0.NavigationComponent;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.NavigationComponent();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_NavigationComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_NavigationComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.NavigationComponent>;
  _NavigationComponent_0_3:Wrapper_NavigationComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_NavigationComponent_Host0,renderType_NavigationComponent_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'header-navigation',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_NavigationComponent0(this.viewUtils,this,0,this._el_0);
    this._NavigationComponent_0_3 = new Wrapper_NavigationComponent();
    this.compView_0.create(this._NavigationComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._NavigationComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.NavigationComponent) && (0 === requestNodeIndex))) { return this._NavigationComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._NavigationComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const NavigationComponentNgFactory:import7.ComponentFactory<import0.NavigationComponent> = new import7.ComponentFactory<import0.NavigationComponent>('header-navigation',View_NavigationComponent_Host0,import0.NavigationComponent);
const styles_NavigationComponent:any[] = [import8.styles];
var renderType_NavigationComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.Emulated,styles_NavigationComponent,{});
export class View_NavigationComponent0 extends import1.AppView<import0.NavigationComponent> {
  _el_0:any;
  compView_0:import1.AppView<import9.MdToolbar>;
  _MdToolbar_0_3:import10.Wrapper_MdToolbar;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _el_4:any;
  _text_5:any;
  _el_6:any;
  _text_7:any;
  _text_8:any;
  _text_9:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_NavigationComponent0,renderType_NavigationComponent,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'md-toolbar',new import3.InlineArray2(2,'color','primary'),(null as any));
    this.compView_0 = new import10.View_MdToolbar0(this.viewUtils,this,0,this._el_0);
    this._MdToolbar_0_3 = new import10.Wrapper_MdToolbar(new import11.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText((null as any),'\n                    ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,(null as any),'a',new import3.InlineArray4(4,'class','navbar-brand','href','#'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n                        ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_2,'span',new import3.InlineArray4(4,'aria-hidden','true','class','glyphicon glyphicon-cloud'),(null as any));
    this._text_5 = this.renderer.createText(this._el_2,'\n                          \n                        ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_2,'span',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_7 = this.renderer.createText(this._el_6,'Weather in nearest places',(null as any));
    this._text_8 = this.renderer.createText(this._el_2,'\n                    ',(null as any));
    this._text_9 = this.renderer.createText((null as any),'\n                ',(null as any));
    this.compView_0.create(this._MdToolbar_0_3.context);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._el_6,
      this._text_7,
      this._text_8,
      this._text_9
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import9.MdToolbar) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._MdToolbar_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'primary';
    this._MdToolbar_0_3.check_color(currVal_0_0_0,throwOnChange,false);
    if (this._MdToolbar_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {
      cb(this._text_1,ctx);
      cb(this._el_2,ctx);
      cb(this._text_9,ctx);
    }
    if (((nodeIndex == 0) && (ngContentIndex == 1))) {  }
  }
}