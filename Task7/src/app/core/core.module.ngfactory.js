/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require("@angular/core/src/linker/ng_module_factory");
var import1 = require("./core.module");
var import2 = require("@angular/common/src/common_module");
var import3 = require("@angular/material/core/compatibility/default-mode");
var import4 = require("@angular/material/core/ripple/ripple");
var import5 = require("@angular/material/button/button");
var import6 = require("@angular/forms/src/directives");
var import7 = require("@angular/forms/src/form_providers");
var import8 = require("@angular/material/button-toggle/button-toggle");
var import9 = require("@angular/material/card/card");
var import10 = require("@angular/material/chips/chip-list");
var import11 = require("@angular/material/checkbox/checkbox");
var import12 = require("@angular/material/core/portal/portal-directives");
var import13 = require("@angular/material/core/overlay/overlay-directives");
var import14 = require("@angular/material/core/platform/index");
var import15 = require("@angular/material/core/a11y/index");
var import16 = require("@angular/material/dialog/index");
var import17 = require("@angular/material/core/line/line");
var import18 = require("@angular/material/grid-list/grid-list");
var import19 = require("@angular/http/src/http_module");
var import20 = require("@angular/material/icon/icon");
var import21 = require("@angular/material/input/input");
var import22 = require("@angular/material/list/list");
var import23 = require("@angular/material/menu/menu");
var import24 = require("@angular/material/progress-bar/progress-bar");
var import25 = require("@angular/material/progress-spinner/progress-spinner");
var import26 = require("@angular/material/radio/radio");
var import27 = require("@angular/material/select/index");
var import28 = require("@angular/material/sidenav/sidenav");
var import29 = require("@angular/material/slider/slider");
var import30 = require("@angular/material/slide-toggle/slide-toggle");
var import31 = require("@angular/material/snack-bar/snack-bar");
var import32 = require("@angular/material/core/observe-content/observe-content");
var import33 = require("@angular/material/tabs/tab-group");
var import34 = require("@angular/material/toolbar/toolbar");
var import35 = require("@angular/material/tooltip/tooltip");
var import36 = require("@angular/material/core/rtl/dir");
var import37 = require("@angular/material/core/projection/projection");
var import38 = require("@angular/material/module");
var import39 = require("@angular/common/src/localization");
var import40 = require("@angular/forms/src/directives/radio_control_value_accessor");
var import41 = require("@angular/http/src/backends/browser_xhr");
var import42 = require("@angular/http/src/base_response_options");
var import43 = require("@angular/http/src/backends/xhr_backend");
var import44 = require("@angular/http/src/base_request_options");
var import45 = require("@angular/material/core/gestures/gesture-config");
var import47 = require("../../../node_modules/@angular/material/dialog/dialog-container.ngfactory");
var import48 = require("../../../node_modules/@angular/material/snack-bar/snack-bar-container.ngfactory");
var import49 = require("../../../node_modules/@angular/material/snack-bar/simple-snack-bar.ngfactory");
var import50 = require("../../../node_modules/@angular/material/tooltip/tooltip.ngfactory");
var import51 = require("@angular/core/src/i18n/tokens");
var import52 = require("@angular/http/src/interfaces");
var import53 = require("@angular/http/src/http");
var import54 = require("@angular/platform-browser/src/dom/events/hammer_gestures");
var CoreModuleInjector = (function (_super) {
    __extends(CoreModuleInjector, _super);
    function CoreModuleInjector(parent) {
        return _super.call(this, parent, [
            import47.MdDialogContainerNgFactory,
            import48.MdSnackBarContainerNgFactory,
            import49.SimpleSnackBarNgFactory,
            import50.TooltipComponentNgFactory
        ], []) || this;
    }
    Object.defineProperty(CoreModuleInjector.prototype, "_NgLocalization_38", {
        get: function () {
            if ((this.__NgLocalization_38 == null)) {
                (this.__NgLocalization_38 = new import39.NgLocaleLocalization(this.parent.get(import51.LOCALE_ID)));
            }
            return this.__NgLocalization_38;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_MATERIAL_COMPATIBILITY_MODE_39", {
        get: function () {
            if ((this.__MATERIAL_COMPATIBILITY_MODE_39 == null)) {
                (this.__MATERIAL_COMPATIBILITY_MODE_39 = false);
            }
            return this.__MATERIAL_COMPATIBILITY_MODE_39;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_RadioControlRegistry_40", {
        get: function () {
            if ((this.__RadioControlRegistry_40 == null)) {
                (this.__RadioControlRegistry_40 = new import40.RadioControlRegistry());
            }
            return this.__RadioControlRegistry_40;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_BrowserXhr_41", {
        get: function () {
            if ((this.__BrowserXhr_41 == null)) {
                (this.__BrowserXhr_41 = new import41.BrowserXhr());
            }
            return this.__BrowserXhr_41;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_ResponseOptions_42", {
        get: function () {
            if ((this.__ResponseOptions_42 == null)) {
                (this.__ResponseOptions_42 = new import42.BaseResponseOptions());
            }
            return this.__ResponseOptions_42;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_XSRFStrategy_43", {
        get: function () {
            if ((this.__XSRFStrategy_43 == null)) {
                (this.__XSRFStrategy_43 = import19._createDefaultCookieXSRFStrategy());
            }
            return this.__XSRFStrategy_43;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_XHRBackend_44", {
        get: function () {
            if ((this.__XHRBackend_44 == null)) {
                (this.__XHRBackend_44 = new import43.XHRBackend(this._BrowserXhr_41, this._ResponseOptions_42, this._XSRFStrategy_43));
            }
            return this.__XHRBackend_44;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_RequestOptions_45", {
        get: function () {
            if ((this.__RequestOptions_45 == null)) {
                (this.__RequestOptions_45 = new import44.BaseRequestOptions());
            }
            return this.__RequestOptions_45;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_Http_46", {
        get: function () {
            if ((this.__Http_46 == null)) {
                (this.__Http_46 = import19.httpFactory(this._XHRBackend_44, this._RequestOptions_45));
            }
            return this.__Http_46;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CoreModuleInjector.prototype, "_HAMMER_GESTURE_CONFIG_47", {
        get: function () {
            if ((this.__HAMMER_GESTURE_CONFIG_47 == null)) {
                (this.__HAMMER_GESTURE_CONFIG_47 = new import45.GestureConfig());
            }
            return this.__HAMMER_GESTURE_CONFIG_47;
        },
        enumerable: true,
        configurable: true
    });
    CoreModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import2.CommonModule();
        this._DefaultStyleCompatibilityModeModule_1 = new import3.DefaultStyleCompatibilityModeModule();
        this._MdRippleModule_2 = new import4.MdRippleModule();
        this._MdButtonModule_3 = new import5.MdButtonModule();
        this._InternalFormsSharedModule_4 = new import6.InternalFormsSharedModule();
        this._FormsModule_5 = new import7.FormsModule();
        this._MdButtonToggleModule_6 = new import8.MdButtonToggleModule();
        this._MdCardModule_7 = new import9.MdCardModule();
        this._MdChipsModule_8 = new import10.MdChipsModule();
        this._MdCheckboxModule_9 = new import11.MdCheckboxModule();
        this._PortalModule_10 = new import12.PortalModule();
        this._OverlayModule_11 = new import13.OverlayModule();
        this._PlatformModule_12 = new import14.PlatformModule();
        this._A11yModule_13 = new import15.A11yModule();
        this._MdDialogModule_14 = new import16.MdDialogModule();
        this._MdLineModule_15 = new import17.MdLineModule();
        this._MdGridListModule_16 = new import18.MdGridListModule();
        this._HttpModule_17 = new import19.HttpModule();
        this._MdIconModule_18 = new import20.MdIconModule();
        this._MdInputModule_19 = new import21.MdInputModule();
        this._MdListModule_20 = new import22.MdListModule();
        this._MdMenuModule_21 = new import23.MdMenuModule();
        this._MdProgressBarModule_22 = new import24.MdProgressBarModule();
        this._MdProgressSpinnerModule_23 = new import25.MdProgressSpinnerModule();
        this._MdRadioModule_24 = new import26.MdRadioModule();
        this._MdSelectModule_25 = new import27.MdSelectModule();
        this._MdSidenavModule_26 = new import28.MdSidenavModule();
        this._MdSliderModule_27 = new import29.MdSliderModule();
        this._MdSlideToggleModule_28 = new import30.MdSlideToggleModule();
        this._MdSnackBarModule_29 = new import31.MdSnackBarModule();
        this._ObserveContentModule_30 = new import32.ObserveContentModule();
        this._MdTabsModule_31 = new import33.MdTabsModule();
        this._MdToolbarModule_32 = new import34.MdToolbarModule();
        this._MdTooltipModule_33 = new import35.MdTooltipModule();
        this._RtlModule_34 = new import36.RtlModule();
        this._ProjectionModule_35 = new import37.ProjectionModule();
        this._MaterialModule_36 = new import38.MaterialModule();
        this._CoreModule_37 = new import1.CoreModule();
        return this._CoreModule_37;
    };
    CoreModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import2.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import3.DefaultStyleCompatibilityModeModule)) {
            return this._DefaultStyleCompatibilityModeModule_1;
        }
        if ((token === import4.MdRippleModule)) {
            return this._MdRippleModule_2;
        }
        if ((token === import5.MdButtonModule)) {
            return this._MdButtonModule_3;
        }
        if ((token === import6.InternalFormsSharedModule)) {
            return this._InternalFormsSharedModule_4;
        }
        if ((token === import7.FormsModule)) {
            return this._FormsModule_5;
        }
        if ((token === import8.MdButtonToggleModule)) {
            return this._MdButtonToggleModule_6;
        }
        if ((token === import9.MdCardModule)) {
            return this._MdCardModule_7;
        }
        if ((token === import10.MdChipsModule)) {
            return this._MdChipsModule_8;
        }
        if ((token === import11.MdCheckboxModule)) {
            return this._MdCheckboxModule_9;
        }
        if ((token === import12.PortalModule)) {
            return this._PortalModule_10;
        }
        if ((token === import13.OverlayModule)) {
            return this._OverlayModule_11;
        }
        if ((token === import14.PlatformModule)) {
            return this._PlatformModule_12;
        }
        if ((token === import15.A11yModule)) {
            return this._A11yModule_13;
        }
        if ((token === import16.MdDialogModule)) {
            return this._MdDialogModule_14;
        }
        if ((token === import17.MdLineModule)) {
            return this._MdLineModule_15;
        }
        if ((token === import18.MdGridListModule)) {
            return this._MdGridListModule_16;
        }
        if ((token === import19.HttpModule)) {
            return this._HttpModule_17;
        }
        if ((token === import20.MdIconModule)) {
            return this._MdIconModule_18;
        }
        if ((token === import21.MdInputModule)) {
            return this._MdInputModule_19;
        }
        if ((token === import22.MdListModule)) {
            return this._MdListModule_20;
        }
        if ((token === import23.MdMenuModule)) {
            return this._MdMenuModule_21;
        }
        if ((token === import24.MdProgressBarModule)) {
            return this._MdProgressBarModule_22;
        }
        if ((token === import25.MdProgressSpinnerModule)) {
            return this._MdProgressSpinnerModule_23;
        }
        if ((token === import26.MdRadioModule)) {
            return this._MdRadioModule_24;
        }
        if ((token === import27.MdSelectModule)) {
            return this._MdSelectModule_25;
        }
        if ((token === import28.MdSidenavModule)) {
            return this._MdSidenavModule_26;
        }
        if ((token === import29.MdSliderModule)) {
            return this._MdSliderModule_27;
        }
        if ((token === import30.MdSlideToggleModule)) {
            return this._MdSlideToggleModule_28;
        }
        if ((token === import31.MdSnackBarModule)) {
            return this._MdSnackBarModule_29;
        }
        if ((token === import32.ObserveContentModule)) {
            return this._ObserveContentModule_30;
        }
        if ((token === import33.MdTabsModule)) {
            return this._MdTabsModule_31;
        }
        if ((token === import34.MdToolbarModule)) {
            return this._MdToolbarModule_32;
        }
        if ((token === import35.MdTooltipModule)) {
            return this._MdTooltipModule_33;
        }
        if ((token === import36.RtlModule)) {
            return this._RtlModule_34;
        }
        if ((token === import37.ProjectionModule)) {
            return this._ProjectionModule_35;
        }
        if ((token === import38.MaterialModule)) {
            return this._MaterialModule_36;
        }
        if ((token === import1.CoreModule)) {
            return this._CoreModule_37;
        }
        if ((token === import39.NgLocalization)) {
            return this._NgLocalization_38;
        }
        if ((token === import3.MATERIAL_COMPATIBILITY_MODE)) {
            return this._MATERIAL_COMPATIBILITY_MODE_39;
        }
        if ((token === import40.RadioControlRegistry)) {
            return this._RadioControlRegistry_40;
        }
        if ((token === import41.BrowserXhr)) {
            return this._BrowserXhr_41;
        }
        if ((token === import42.ResponseOptions)) {
            return this._ResponseOptions_42;
        }
        if ((token === import52.XSRFStrategy)) {
            return this._XSRFStrategy_43;
        }
        if ((token === import43.XHRBackend)) {
            return this._XHRBackend_44;
        }
        if ((token === import44.RequestOptions)) {
            return this._RequestOptions_45;
        }
        if ((token === import53.Http)) {
            return this._Http_46;
        }
        if ((token === import54.HAMMER_GESTURE_CONFIG)) {
            return this._HAMMER_GESTURE_CONFIG_47;
        }
        return notFoundResult;
    };
    CoreModuleInjector.prototype.destroyInternal = function () {
    };
    return CoreModuleInjector;
}(import0.NgModuleInjector));
exports.CoreModuleNgFactory = new import0.NgModuleFactory(CoreModuleInjector, import1.CoreModule);
//# sourceMappingURL=core.module.ngfactory.js.map